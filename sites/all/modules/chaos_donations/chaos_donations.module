<?php

/**
 * Implements hook_mail().
 */
function ms_donation_mail($key, &$message, $params) {
  switch ($key) {
    case 'donation_admin':
      $subject = variable_get('ms_donation_received_admin_subject', '');
      $body = variable_get('ms_donation_received_admin_body', '');

      $tokens = array(
        'ms_core_order' => $params['order'],
        'ms_core_payment' => $params['payment'],
        'user' => $params['account'],
      );

      $message['subject'] = token_replace($subject, $tokens);
      $message['body'][] = token_replace($body, $tokens);
      break;

    case 'recurring_donation_received':
      $subject = variable_get('ms_donation_received_recurring_subject', '');
      $body = variable_get('ms_donation_received_recurring_body', '');

      $tokens = array(
        'ms_core_order' => $params['order'],
        'ms_core_payment' => $params['payment'],
        'user' => $params['account'],
      );

      $message['subject'] = token_replace($subject, $tokens);
      $message['body'][] = token_replace($body, $tokens);
      break;

    case 'donation_received':
      $subject = variable_get('ms_donation_received_subject', '');
      $body = variable_get('ms_donation_received_body', '');

      $tokens = array(
        'ms_core_order' => $params['order'],
        'ms_core_payment' => $params['payment'],
        'user' => $params['account'],
      );

      $message['subject'] = token_replace($subject, $tokens);
      $message['body'][] = token_replace($body, $tokens);
      break;
  }
}

/**
 * Implements hook_ms_order_payment().
 */
function ms_donation_ms_order_payment($type, $product, $order, $payment) {
  switch ($product->module) {
    case 'ms_donation':
      $account = user_load($order->uid);

      switch ($type) {
        case "cart":
          if (variable_get('ms_donation_received_body', '')) {
            $payment_vars = array(
              'order' => $order,
              'payment' => $payment,
              'account' => $account,
            );

            // Send Email to User.
            drupal_mail('ms_donation', 'donation_received', $account->mail, user_preferred_language($account), $payment_vars);

            // Send email to admin.
            if (variable_get('ms_donation_received_admin_email', '') && variable_get('ms_donation_received_admin_body', '')) {
              drupal_mail('ms_donation', 'donation_admin', variable_get('ms_donation_received_admin_email', ''), language_default(), $payment_vars);
            }
          }
          break;

        case 'rec_payment':
        case "rec_signup":
          if (variable_get('ms_donation_received_recurring_body', '')) {
            $payment_vars = array(
              'order' => $order,
              'payment' => $payment,
              'account' => $account,
            );

            // Send Email to User.
            drupal_mail('ms_donation', 'recurring_donation_received', $account->mail, user_preferred_language($account), $payment_vars);

            // Send email to admin.
            if (variable_get('ms_donation_received_admin_email', '') && variable_get('ms_donation_received_admin_body', '')) {
              drupal_mail('ms_donation', 'donation_admin', variable_get('ms_donation_received_admin_email', ''), language_default(), $payment_vars);
            }
          }
          break;
      }
      break;
  }
}

/**
 * Form constructor for the enter donation form.
 *
 * @ingroup forms
 * @see ms_donation_enter_donation_form_validate()
 * @see ms_donation_enter_donation_form_submit()
 */
function ms_donation_enter_donation_form() {
  $form['donation'] = array(
    '#type' => 'textfield',
    '#title' => variable_get('ms_donation_name', t('Donation')),
    '#size' => 25,
    '#description' => variable_get('ms_donation_description', ''),
  );
  $form['apply_donation'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
    '#validate' => array('ms_donation_enter_donation_form_validate'),
    '#submit' => array('ms_donation_enter_donation_form_submit'),
  );

  return $form;
}

/**
 * Form validation handler for ms_donation_enter_donation_form().
 */
function ms_donation_enter_donation_form_validate($form, &$form_state) {
  drupal_get_messages('error');

  $min = variable_get('ms_donation_minimum_amount', 0.01);
  $amount = floatval($form_state['values']['donation']);

  if ($amount < $min) {
    form_set_error('donation', t("You must enter an amount greater than @min", array('@min' => $min)));
  } else {
    ms_donation_add_donation_to_cart($amount);

    // Redirect to ms/checkout.
    drupal_goto('ms/checkout');
  }
}

function ms_donation_form($form, &$form_state) {
  $form['#prefix'] = "<div id='ms_donation_block'>";
  $form['#suffix'] = "</div>";
  $choices = ms_core_extract_select_options(variable_get('ms_donation_product_choices', ''));
  if (!empty($choices)) {
    if (variable_get('ms_donation_product_custom_amount', TRUE)) {
      $choices['custom'] = t('Other');
    }
    $form['amount'] = array(
      '#type' => variable_get('ms_donation_product_element', 'select'),
      '#title' => t('Amount'),
      '#required' => TRUE,
      '#options' => $choices,
      '#description' => variable_get('ms_donation_description', ''),
      '#default_value' => key($choices),
      '#ajax' => array(
        'callback' => 'ms_donation_block_form_ajax_callback',
        'wrapper' => 'ms_donation_block',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    if (!empty($form_state['values']['amount']) && $form_state['values']['amount'] == 'custom') {
      $form['custom_amount'] = array(
        '#type' => 'textfield',
        '#size' => 15,
      );
    }
  } else {
    $form['amount'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Amount'),
      '#description' => variable_get('ms_donation_description', ''),
      '#size' => 15,
    );
  }

  $terms = array();
  if ($raw = trim(variable_get('ms_donation_product_terms', ''))) {
    foreach (explode("\n", $raw) as $line) {
      list($count, $period, $name) = explode('|', $line);
      $terms[$count . '_' . $period] = $name;
    }
  }
  if (!empty($terms)) {
    if (variable_get('ms_donation_product_one_time', TRUE)) {
      $terms = array_merge(array('once' => t('One time')), $terms);
    }
    $form['term'] = array(
      '#type' => variable_get('ms_donation_product_element', 'select'),
      '#title' => t('How often?'),
      '#required' => TRUE,
      '#options' => $terms,
      '#default_value' => key($terms),
    );
  } else {
    $form['term'] = array(
      '#type' => 'value',
      '#value' => 'once',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

function ms_donation_form_validate($form, &$form_state) {
  $min = variable_get('ms_donation_minimum_amount', 0.01);
  $amount = $form_state['values']['amount'];
  if ($amount == 'custom' && isset($form_state['values']['custom_amount'])) {
    $amount = $form_state['values']['custom_amount'];
  }
  if (!is_numeric($amount)) {
    form_set_error('amount', t("You must enter only numeric amounts."));
  } elseif ($amount <= 0) {
    form_set_error('amount', t("You must enter a positive number."));
  } elseif ($amount < $min) {
    form_set_error('amount', t("You must enter an amount greater than @min", array('@min' => $min)));
  }
}

function ms_donation_form_submit($form, &$form_state) {
  $amount = $form_state['values']['amount'];

  if ($amount == 'custom') {
    $amount = $form_state['values']['custom_amount'];
  }
  switch ($form_state['values']['term']) {
    case 'once':
      $product = ms_core_new_product(variable_get('ms_donation_name', t('Donation')), 'ms_donation', 'ms_donation', $amount, 'cart');
      break;

    default:
      $product = ms_core_new_product(variable_get('ms_donation_name', t('Donation')), 'ms_donation', 'ms_donation', $amount, 'recurring');
      // Add the recurring schedule.
      list($length, $unit) = explode('_', $form_state['values']['term']);
      $product->recurring_schedule = array(
        'total_occurrences' => 0,
        'main_amount' => $amount,
        'main_length' => $length,
        'main_unit' => strtoupper($unit),
        'has_trial' => FALSE,
        'trial_amount' => 0,
        'trial_length' => 0,
        'trial_unit' => '',
      );
      break;

  }

  ms_core_add_cart_product($product, FALSE, FALSE);

  drupal_goto('ms/checkout');
}
