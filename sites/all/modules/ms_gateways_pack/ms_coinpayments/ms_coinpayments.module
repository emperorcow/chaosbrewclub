<?php

/**
 * @file
 * This module provides CoinPayments (http://coinpayments.net/) payment gateway integration
 * to MS Core.
 *
 * Copyright 2008-2014 MoneyScripts.net - Leighton Whiting
 */

/**
 * Implements hook_menu().
 */
function ms_coinpayments_menu() {
  $items = array();

  $items['ms_coinpayments/ipn_backend'] = array(
    'page callback' => 'ms_coinpayments_process_ipn',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ms_coinpayments/thank-you/%'] = array(
    'title' => 'Thank You',
    'page callback' => 'ms_coinpayments_thankyou_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_coinpayments/check_ipn_status/%'] = array(
    'page callback' => 'ms_coinpayments_ipn_ajax_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_ms_core_currencies().
 */
function ms_coinpayments_ms_core_currencies() {
  return array(
    'BTC' => 'Bitcoin',
    'LTC' => 'Litecoin',
    'ADT' => 'AndroidsToken',
    'ANC' => 'Anoncoin',
    'BQC' => 'BBQCoin',
    'CAP' => 'BottleCaps',
    'CGB' => 'CryptogenicBullion',
    'COL' => 'ColossusCoin',
    'DGC' => 'DigitalCoin',
    'DOGE' => 'Dogecoin',
    'DVC' => 'Devcoin',
    'FRC' => 'Freicoin',
    'FRK' => 'Franko',
    'FST' => 'FastCoin',
    'FTC' => 'Feathercoin',
    'GLD' => 'Goldcoin',
    'IFC' => 'Infinitecoin',
    'KGC' => 'Krugercoin',
    'MEC' => 'Megacoin',
    'NET' => 'Netcoin',
    'NMC' => 'Namecoin',
    'NVC' => 'Novacoin',
    'ORB' => 'Orbitcoin',
    'PPC' => 'Peercoin',
    'QRK' => 'Quark',
    'RED' => 'Redcoin',
    'SBC' => 'StableCoin',
    'SPT' => 'Spots',
    'SXC' => 'Sexcoin',
    'TRC' => 'Terracoin',
    'UNO' => 'Unobtanium',
    'WDC' => 'Worldcoin',
    'XPM' => 'PrimeCoin',
    'YAC' => 'YaCoin',
    'ZET' => 'Zetacoin',
  );
}

/**
 * Admin Settings Form.
 */
function ms_coinpayments_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_coinpayments_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('CoinPayments.net Merchant ID'),
    '#description' => t('Your Merchant ID on CoinPayments.net, found on the Account Settings page.'),
    '#default_value' => variable_get('ms_coinpayments_merchant_id', ''),
    '#required' => TRUE,
  );
  $form['main']['ms_coinpayments_ipn_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('IPN Secret'),
    '#description' => t('You need to set this on the Account Settings page at CoinPayments.net, then enter it here. You can leave the IPN URL blank. Both HMAC and HTTP Auth types are supported.'),
    '#default_value' => variable_get('ms_coinpayments_ipn_secret', ''),
    '#required' => TRUE,
  );
  $form['main']['ms_coinpayments_supported_currencies'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Supported Currencies'),
    '#description' => t("This gateway will only show as an option for orders with the selected currencies. CoinPayments will automatically convert currencies from any of these into any of the coins you have selected in your CoinPayments.net account."),
    '#options' => ms_core_get_currencies(),
    '#default_value' => variable_get('ms_coinpayments_supported_currencies', array()),
  );
  $form['main']['ms_coinpayments_jump_page_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Jump Page Text'),
    '#description' => t("Fill in the text you wish the user to see for the Jump page. They will be redirected in 5 seconds if Javascript is enabled, otherwise a button is provided for them to click."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_coinpayments_jump_page_text',
      t("Please wait for a few seconds, your order is being processed and you will be redirected to CoinPayment's secure payment page.
<br/><br/>
If you are not automatically redirected to the CoinPayment payment page within 5 seconds, click below:
<br/><br/>")),
  );
  $form['main']['ms_coinpayments_jump_page_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Jump Page Timeout'),
    '#description' => t("How many seconds should the Jump Page wait until it automatically redirects?"),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_coinpayments_jump_page_timeout', 0),
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_coinpayments_ms_core_payment_gateway() {
  $gateways['ms_coinpayments'] = array(
    'name' => 'CoinPayments',
    'display_name' => t('Coins'),
    'description' => t('Pay by Coin'),
    'module' => 'ms_coinpayments',
    'currency' => variable_get('ms_coinpayments_supported_currencies', array()),
    'settings' => ms_coinpayments_admin(),
    'recurring_schedule_support' => FALSE,
    'saved_cards_support' => FALSE,
    'checkout_form' => 'ms_coinpayments_payment_submit_form',
  );

  return $gateways;
}

/**
 * Build the Checkout Form, which redirects to CoinPayments.net
 */
function ms_coinpayments_payment_submit_form($form, $form_state, MsOrder $order) {
  $form['#id'] = 'ms-coinpayments-jump-form';
  $form['#action'] = 'https://www.coinpayments.net/index.php';

  $data = array(
    'cmd' => '_pay',
    'reset' => '1',
    'merchant' => ms_core_variable_get('ms_coinpayments_merchant_id', '', $order),
    'ipn_url' => 'ms_coinpayments/ipn_backend',
    'allow_extra' => 0,
    'want_shipping' => 0,
    'cancel_url' => 'ms/checkout',
    'success_url' => 'ms_coinpayments/thankyou',
    'currency' => $order->currency,
    'invoice' => $order->order_key . '-' . REQUEST_TIME,
    'amountf' => round($order->amount, 2),
    'item_name' => $order->title,
  );

  foreach ($data as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value
    );
  }

  $form['jump_text'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('ms_coinpayments_jump_page_text', t("Please wait for a few seconds, your order is being processed and you will be redirected to CoinPayment's secure payment page.
<br/><br/>
If you are not automatically redirected to the CoinPayment payment page within 5 seconds, click below:
<br/><br/>")),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  // Add in the JS
  $timeout = variable_get('ms_coinpayments_jump_page_timeout', 0) * 1000;
  $js = "
    (function ($) {
    window.setTimeout(function() {
      $('#ms-coinpayments-jump-form').submit();
    }, $timeout);
    })(jQuery);
  ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  return $form;
}

/**
 * Checks if the IPN is valid.
 *
 * @param Array $ipn
 *   The IPN array.
 *
 * @return bool
 *   TRUE if the IPN is valid, FALSE otherwise.
 */
function ms_coinpayments_valid_ipn($ipn) {
  if (!isset($ipn['ipn_mode'])) {
    ms_core_log_error('ms_coinpayments', 'IPN received with no ipn_mode.');
    return FALSE;
  }
  switch ($ipn['ipn_mode']) {
    case 'httpauth':
      if (isset($_SERVER['PHP_AUTH_USER']) && $_SERVER['PHP_AUTH_USER'] == variable_get('ms_coinpayments_merchant_id', '')) {
        if (isset($_SERVER['PHP_AUTH_PW']) && $_SERVER['PHP_AUTH_PW'] == trim(variable_get('ms_coinpayments_ipn_secret', ''))) {
          return TRUE;
        } else {
          ms_core_log_error('ms_coinpayments', 'IPN Secret not correct or no HTTP Auth variables passed. If you are using PHP in CGI mode try the HMAC method.');
        }
      } else {
        ms_core_log_error('ms_coinpayments', 'Merchant ID not correct or no HTTP Auth variables passed. If you are using PHP in CGI mode try the HMAC method.');
      }
      break;

    case 'hmac':
      if (empty($ipn['merchant']) || $ipn['merchant'] != variable_get('ms_coinpayments_merchant_id', '')) {
        ms_core_log_error('ms_coinpayments', 'Invalid Merchant ID. IPN: !ipn', array('!ipn' => ms_core_print_r($ipn)));
        return FALSE;
      }

      if (empty($_SERVER['HTTP_HMAC'])) {
        ms_core_log_error('ms_coinpayments', 'Missing HMAC Signature. Server: !server', array('!server' => ms_core_print_r($_SERVER)));
        return FALSE;
      }

      $input = file_get_contents('php://input');
      if ($input === FALSE || empty($input)) {
        ms_core_log_error('ms_coinpayments', 'Missing HMAC Data. Server: !server', array('!server' => ms_core_print_r($_SERVER)));
        return FALSE;
      }

      $hmac = hash_hmac("sha512", $input, variable_get('ms_coinpayments_ipn_secret', ''));
      if ($hmac != $_SERVER['HTTP_HMAC']) {
        ms_core_log_error('ms_coinpayments', 'Invalid HMAC Signature. Sig: @sig Input: !input', array('@sig' => $hmac, '!input' => ms_core_print_r($input)));
        return FALSE;
      }

      return TRUE;

    default:
      ms_core_log_error('ms_coinpayments', 'Unkown IPN method received. IPN: !ipn', array('!ipn' => ms_core_print_r($ipn)));
      break;
  }

  return FALSE;
}

/**
 * Processes an incoming IPN.
 *
 * @return bool
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 */
function ms_coinpayments_process_ipn() {
  $ipn = $_POST;

  if (!ms_coinpayments_valid_ipn($ipn)) {
    return FALSE;
  }

  switch ($ipn['ipn_type']) {
    case 'button':
      // Make sure we don't process an IPN twice.
      $payment = ms_core_load_payment_by_transaction_id($ipn['txn_id']);
      if ($payment) {
        ms_core_log_error('ms_coinpayments', 'Duplicate IPN received. Payment: !payment. IPN: !ipn',
          array('!payment' => ms_core_print_r($payment), '!ipn' => ms_core_print_r($ipn)));
        return FALSE;
      }

      if (!empty($ipn['invoice']) && strpos($ipn['invoice'], '-') !== FALSE) {
        list($order_key) = explode('-', $ipn['invoice']);
        $order = ms_core_order_load_by_key($order_key);

        if ($order) {
          // Do some additional checks here.
          if ($ipn['currency1'] != $order->currency) {
            // Possible hacking attempt.
            ms_core_log_error('ms_coinpayments', 'Possible hacking attempt. Wrong currency code. Order: !order IPN: !ipn',
              array('!order' => ms_core_print_r($order), '!ipn' => ms_core_print_r($ipn)));
            return FALSE;
          }
          if ($ipn['amount1'] != $order->amount) {
            // Possible hacking attempt.
            ms_core_log_error('ms_coinpayments', 'Possible hacking attempt. Wrong amount. Order: !order IPN: !ipn',
              array('!order' => ms_core_print_r($order), '!ipn' => ms_core_print_r($ipn)));
            return FALSE;
          }
          $payment = ms_core_new_payment($order->oid, 'ms_coinpayments', 'cart', $ipn['amount1'], $ipn['currency1']);
          $payment->transaction = $ipn['txn_id'];
          $payment->data['ipn'] = $ipn;

          $payment->first_name = $ipn['first_name'];
          $payment->last_name = $ipn['last_name'];

          $payment->shipping_address = array(
            'street' => isset($ipn['address1']) ? $ipn['address1'] : '',
            'city' => isset($ipn['city']) ? $ipn['city'] : '',
            'state' => isset($ipn['state']) ? $ipn['state'] : '',
            'zip' => isset($ipn['zip']) ? $ipn['zip'] : '',
            'country' => isset($ipn['country']) ? $ipn['country'] : '',
            'phone' => isset($ipn['phone']) ? $ipn['phone'] : '',
          );

          if ($ipn['status'] < 0) {
            $payment->type = 'failed';
          } else if ($ipn['status'] < 100) {
            $payment->type = 'pending';
          }

          ms_core_enter_payment($payment);
        } else {
          ms_core_log_error('ms_coinpayments', 'Error loading order. IPN: !ipn', array('!ipn' => ms_core_print_r($ipn)));
          return FALSE;
        }
      } else {
        ms_core_log_error('ms_coinpayments', 'Invoice Number Incorrectly Formatted. IPN: !ipn', array('!ipn' => ms_core_print_r($ipn)));
        return FALSE;
      }
      break;

    default:
      ms_core_log_error('ms_coinpayments', 'Unkown IPN type received. IPN: !ipn', array('!ipn' => ms_core_print_r($ipn)));
      break;
  }
}

/**
 * Landing page which will wait until the IPN has been received before proceeding.
 */
function ms_coinpayments_thankyou_page($unique_key) {
  if (!$order = ms_core_order_load_unique($unique_key)) {
    // Should never get this far
    ms_core_log_error('ms_coinpayments', 'The order was unable to be loaded from the unique key: !key',
      array('!key' => $unique_key));
    return t("There was an error processing the payment. This error has been logged.");
  }

  ms_core_set_order_session($order);

  $thank_you_page = url('ms/thankyou');
  $check_url = url('ms_coinpayments/check_ipn_status/' . $unique_key, array('absolute' => TRUE));
  $txn_id = '';

  // JS
  $js = "
  jQuery(function($) {
   jQuery('.ms_coinpayments_landing_click_here').hide();
   check_ipn_status();
  });

  function check_ipn_status() {
    jQuery.getJSON('$check_url', {txn_id : '$txn_id'}, parse_info);
  }

  function parse_info(data) {
    switch (data.result) {
      case 'success':
        window.location.replace('$thank_you_page');
        break;
      case 'error':
        alert(data.error);
        break;
      case 'failure':
        setTimeout(check_ipn_status, 5000);
        break;
      default:
        alert('test');
        setTimeout(check_ipn_status, 5000);
        break;
    }
  }
  ";
  drupal_add_js($js, 'inline');

  // Show a loading page while we wait for the IPN from CoinPayments.
  $output = '';
  $ajax_img = base_path() . drupal_get_path('module', 'ms_core') . '/images/ajax-bar-loader.gif';
  $output .= "<div style='text-align:center;width:100%;'>"
    . t('Your order is being processed. Please allow up to 2 minutes for this process to complete.')
    . "</div>";
  $output .= "<div style='text-align:center;width:100%;'>"
    . t('Thank you for your patience.')
    . "</div>";

  $output .= "<div class='ajax_loader' style='margin: 15px 0 0;clear:both;width:100%;text-align:center;'><img src='$ajax_img' alt='Loading' /></div>";
  $output .= "<div class='ms_coinpayments_landing_click_here'>"
    . t('If you have waited for over one minute, please !click.',
      array('!click' => l(t('click here'), 'ms/thankyou')))
    . "</div>";

  return $output;
}

/**
 * Checks if an IPN has been received yet.
 *
 * @param $unique_key
 *   The unique key associated with the order.
 *
 * @return void
 *   Returns a json encoded string.
 */
function ms_coinpayments_ipn_ajax_page($unique_key) {
  // Stop the caching.
  $GLOBALS['conf']['cache'] = FALSE;

  $data = array();
  if (!$order = ms_core_order_load_unique($unique_key)) {
    // Should never get this far.
    ms_core_log_error('ms_coinpayments', 'The order was unable to be loaded from the unique key: !key',
      array('!key' => $unique_key));
    $data['result'] = 'error';
    $data['error'] = t("There was an error loading the order. Please contact a site administrator.");
  } else {
    // Check if the payment has been recorded yet.
    if (isset($_REQUEST['txn_id']) AND $txn_id = $_REQUEST['txn_id']) {
      $data['result'] = 'failure';

      // Check the status of the payment, and show a message
      foreach ($order->payments as $payment) {
        if ($payment->transaction == $txn_id) {
          $data['result'] = 'success';
          $data['status'] = $payment->data['payment_status'];

          switch ($payment->data['payment_status']) {
            case 'Completed':
            case 'Processed':
              drupal_set_message(t('The payment has been completed.'));
              break;

            case 'Denied':
            case 'Expired':
            case 'Failed':
              ms_core_log_error('ms_coinpayments', 'A payment has failed.');
              ms_core_add_history_item($order, 0, t('Payment failed.'), TRUE);
              drupal_set_message(t('The order could not be charged. Please contact a site administrator.'));
              break;

            case 'Pending':
              ms_core_log_error('ms_coinpayments', 'A payment was marked as pending.', array(), WATCHDOG_WARNING);
              ms_core_add_history_item($order, 0, t('Payment marked as Pending.', array()), TRUE);
              drupal_set_message(t('The payment is pending. When the payment is completed, you will be notified by email.'));
              break;
          }
        }
      }
    } else {
      if ($order->uid && count($order->payments)) {
        // The order has a user id and is ready to go
        $data['result'] = 'success';
        $data['status'] = 'Unable to determine status';
      } else {
        $data['result'] = 'failure';
      }
    }
  }
  print drupal_json_encode($data);
}
